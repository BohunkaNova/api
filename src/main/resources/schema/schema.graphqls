input OrganizationInput {
    name: String!
}

input LoginInput {
    email: String!
    password: String!
}

input RegisterInput {
    email: String!
    password: String!
    name: String
}

type Organization @connection {
    id: String!
    name: String!
    createdBy: String!
}

type Department @connection {
    id: String!
    name: String!
    createdBy: String!
}

type User @connection {
    id: String!
    name: String!
}

type LoginResponse {
    token: String!
    user: User!
}

type Query {
    organizations (first: Int, last: Int, after: String): OrganizationConnection
    organization (id: String!): Organization
    currentUser: User
}

type Mutation {
    createOrganization (input: OrganizationInput!): Organization
    updateOrganization (id: String!, name: String!): Organization
    deleteOrganization (id: String!): Boolean

    login (input: LoginInput!): LoginResponse
    register (input: RegisterInput!): LoginResponse
}